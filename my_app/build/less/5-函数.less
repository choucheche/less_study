@base: #f04615;
@width: 0.5;

.class {
    width: percentage(@width); // returns `50%`
    color: saturate(@base, 5%);
    background-color: spin(lighten(@base, 25%), 8);
}
/*
.class {
  width: 50%;
  color: #f6430f;
  background-color: #f8b38d;
}
*/
//------------------------------------
.mixin() {
  @width:  100%;
  @height: 200px;
}

.caller {
  .mixin();
  width:  @width;
  height: @height;
}
/*
.caller {
  width: 100%;
  height: 200px;
}
*/
//-------------------------------------
.average(@x, @y) {
  @average: ((@x + @y) / 2);
}

div {
  .average(16px, 50px); // "call" the mixin
  padding: @average;    // use its "return" value
}
/*
div {
  padding: 33px;
}
*/
//------------------------------------
@media: mobile;
@a: 1px;
.mixin (@a) when (@media = mobile) {
  @mobile_width :@a/2;
}
.mixin (@a) when (@media = desktop) {
  @mobile_width :@a;
}
.mobile_box{
  .mixin (@a);
  width:@mobile_width;
}
/*
.mobile_box {
  width: 0.5px;
}
*/
//------------------------------------
@c: 3px;
@b: 4px;
.max (@c; @b) when (@c > @b) { @max_width: @c }
.max (@c; @b) when (@c < @b) { @max_width: @b }
.max_box{
  .max(@c;@b);
  width:@max_width;
}
/*
.max_box {
  width: 4px;
}
*/
//-------------------------------------------
@d:-1;
.mixin (@d) when (@d > 0) {
  @d_width:@d;
}
.mixin (@d) when (isnumber(@d)) and (@d <= 0)  {
/*
iscolor
isnumber
isstring
iskeyword
isurl
*/
  @d_width:6px;
}
.mixin_width{
  .mixin (@d);
  width:@d_width;
}
/*
.mixin_width {
  width: 6px;
}
*/
//------------------------------------
@e:-1;
.mixin2 (@e) when (@e >= 0) {
  @e_width:@e;
}
.mixin2 (@e) when not (@e > 0) {
  @e_width:0;
}
.mixin2_width{
  .mixin2 (@e);
  width:@e_width;
}
/*
.mixin2_width {
  width: 0;
}
*/
//-----------------------------------
@my-option:true;
button when (@my-option = true) {
  color: white;
}
/*
button {
  color: white;
}
*/
//-------------------------------------
@my-option:true;
& when (@my-option = true) {
  button {
    color: white;
  }
  a {
    color: blue;
  }
}
/*
button {
  color: white;
}
a {
  color: blue;
}
*/
//-----------------------------
.generate-columns(4);
.generate-columns(@n, @i: 1) when (@i =< @n) {
  //将上面的4放入@n里，定义@i=1，循环 @i =< @n
  .column-@{i} {
  //自定义class名 .column-@{i}，@{i}值可变换
    width: (@i * 100% / @n);
    // 随着值的改变修改width的值
  }
  .generate-columns(@n, (@i + 1));
  //@i+1，再执行一次上面的.generate-columns函数
}
/*
.column-1 {
  width: 25%;
}
.column-2 {
  width: 50%;
}
.column-3 {
  width: 75%;
}
.column-4 {
  width: 100%;
}
*/
//----------------------------------------
.merge_box1() {
  box-shadow+: inset 0 0 10px #555;
}
.merge_box2 {
  .merge_box1();
  box-shadow+: 0 0 20px black;
  //box-shadow+: 0 0 20px black;里的+号，将两个样式合并
}
/*
.merge_box2 {
  box-shadow: inset 0 0 10px #555, 0 0 20px black;
}
*/
//---------------------------------------------
